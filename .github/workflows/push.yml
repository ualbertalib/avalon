# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby
# https://github.com/actions/setup-ruby
# https://github.com/ruby/setup-ruby#versioning


name: CI 

on: [push, pull_request]

jobs:
  test:
    name: Run test suite
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        ruby: [ '2.5', '2.6' ] 
        node: [ '12', '14' ] 

    # use service instead of docker-compose as the `bundle exec rake` command installs Solr & Fedora
    #env:
    #  COMPOSE_FILE: docker-compose.lightweight.yml

    services:
      mariadb:
        image: mariadb:10.3
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: >-
          --health-cmd="mysqladmin ping" 
          --health-interval=10s 
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up Node JS 
      uses: actions/setup-node@v2
      with: 
        node-version: ${{ matrix.node }}

    # use service instead of docker-compose as the `bundle exec rake` command installs Solr & Fedora
    #- name: Initiate the Avalon service containers 
    #  run: docker-compose up -d

    - name: Set up Ruby
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }} 

    - name: Cache Ruby Gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: bundle-use-ruby-${{ matrix.os }}-${{ matrix.ruby }}-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          bundle-use-ruby-${{ matrix.os }}-${{ matrix.ruby }}-

    - name: Install dependencies - Ruby
      run: |
        bundle config path vendor/bundle
        bundle config with mysql aws test
        bundle config without debug development staging uat production
        bundle install --with mysql --jobs 4 --retry 3

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies - Yarn 
      run: yarn install 

    - name: Run tests
      env:
        RAILS_ENV: test
        DATABASE_URL: mysql2://root:@127.0.0.1:3306/
        FCREPO_URL: http://127.0.0.1:8986/rest
        REDIS_URL: redis://redis:6379
        SOLR_TEST_URL: http://127.0.0.1:8985/solr/hydra-test
        MATTERHORN_CLIENT_MEDIA_PATH: tmp/masterfiles
        MATTERHORN_SERVER_MEDIA_PATH: tmp/masterfiles
        MASTER_FILE_PATH: tmp/masterfiles
      run: |
        mkdir -p tmp/masterfiles
        bundle config
        bundle exec rake db:create 
        bundle exec rake db:migrate
        bundle exec rake
